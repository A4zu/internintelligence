{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNDUqMNS8KjOsvMlcoSR5SE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/A4zu/internintelligence/blob/main/endtoendmachinelearningpipeline\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1️⃣ Kitabxanaları yüklə\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "import joblib\n",
        "from fastapi import FastAPI\n",
        "import uvicorn\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "\n",
        "iris = load_iris()\n",
        "X = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
        "y = pd.Series(iris.target)\n",
        "\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "print(\"Model Performance:\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\", precision_score(y_test, y_pred, average='macro'))\n",
        "print(\"Recall:\", recall_score(y_test, y_pred, average='macro'))\n",
        "print(\"F1 Score:\", f1_score(y_test, y_pred, average='macro'))\n",
        "\n",
        "\n",
        "joblib.dump(model, \"rf_model.pkl\")\n",
        "joblib.dump(scaler, \"scaler.pkl\")\n",
        "\n",
        "\n",
        "mlflow.start_run()\n",
        "mlflow.sklearn.log_model(model, \"random_forest_model\")\n",
        "mlflow.log_metric(\"accuracy\", accuracy_score(y_test, y_pred))\n",
        "mlflow.log_metric(\"precision\", precision_score(y_test, y_pred, average='macro'))\n",
        "mlflow.log_metric(\"recall\", recall_score(y_test, y_pred, average='macro'))\n",
        "mlflow.log_metric(\"f1_score\", f1_score(y_test, y_pred, average='macro'))\n",
        "mlflow.end_run()\n",
        "\n",
        "\n",
        "app = FastAPI()\n",
        "\n",
        "@app.post(\"/predict\")\n",
        "def predict(features: list):\n",
        "\n",
        "    loaded_model = joblib.load(\"rf_model.pkl\")\n",
        "    loaded_scaler = joblib.load(\"scaler.pkl\")\n",
        "\n",
        "\n",
        "    features_scaled = loaded_scaler.transform([features])\n",
        "\n",
        "\n",
        "    prediction = loaded_model.predict(features_scaled)\n",
        "    return {\"prediction\": int(prediction[0])}\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "eoL-RCUktDfA"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}