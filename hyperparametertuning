{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN1EZ0Fq9b6SHxsO/5moPQE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/A4zu/internintelligence/blob/main/hyperparametertuning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fXP2jLeZEnef",
        "outputId": "b75a9bcf-5da5-4b91-d98b-d6902fb4921b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 1.0\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        10\n",
            "           1       1.00      1.00      1.00         9\n",
            "           2       1.00      1.00      1.00        11\n",
            "\n",
            "    accuracy                           1.00        30\n",
            "   macro avg       1.00      1.00      1.00        30\n",
            "weighted avg       1.00      1.00      1.00        30\n",
            "\n",
            "Ən yaxşı parametrlər: {'max_depth': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 200}\n",
            "Ən yaxşı skor: 0.9570860786959858\n",
            "Final Model Performance:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1 Score: 1.0\n",
            "Ən yaxşı parametrlər (Random Search): {'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 16, 'n_estimators': 156}\n"
          ]
        }
      ],
      "source": [
        "# Əsas kitabxanalar\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Model və qiymətləndirmə\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score\n",
        "#gridsearchcv-butun mumkun kombinasiyalari sinayir(daha deqiqdir)\n",
        "#randomsearchcv-random secib sinayir(daha suretlidir)\n",
        "#niye istifade olunurlar?\n",
        "#en yaxsi performans veren modeli tapmaq ucun\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "#cross-validation ucun funksiya\n",
        "#modeli bir nece hisseye bolur(bir hissesi test ucun diger hisseleri train ucun istifade olunur)\n",
        "#modelin neticesinin ferqli data setlere gore eyni olub-olmadigini yoxlayir\n",
        "#RandomForestClassifier-overfitting azaldir,bir nece decision tree birlesdirir(tek agac uzerinden oyrenmet overfitting getirir cxarir,coxlu agac uzer\n",
        "#zerinden oyrenmek ise daha deqiq netice vermeyimize komek edir,amma cox vaxt alir)\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
        "#recall-TP/(TP+FN)0missing olma sansini azaltmaq ucundur, yeni heqiqeten vulnerability var amma men yoxdur demisem(FN)\n",
        "#precision-her sinif ucun duzgun progrnolarin nisbeti()-TP\n",
        "#F1-2*PRECISION*RECALL/(PRECISION+RECALL)-recall ve precision tarazlayir\n",
        "#classification report-modelin butun esas metricleriher sinif uzre ayri ayri gosterir\n",
        "#andomizedSearchCV-də parametrləri təsadüfi seçmək üçün\n",
        "#Məsələn:n_estimators': randint(50, 300)\n",
        "\n",
        "\n",
        "\n",
        "# Dataset üçün (misal olaraq iris)\n",
        "from sklearn.datasets import load_iris\n",
        "# Dataset yüklə\n",
        "iris = load_iris()\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "\n",
        "# Train və test bölməsi\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "# Default Random Forest\n",
        "rf = RandomForestClassifier(random_state=42)\n",
        "#ustdeki modelicagirir\n",
        "rf.fit(X_train, y_train)\n",
        "#modeli oyrenmek emri verir\n",
        "#x_train-xususiyyetler yazilir, y_train-konkret numune yazilir\n",
        "\n",
        "\n",
        "# Test nəticəsi\n",
        "y_pred = rf.predict(X_test)\n",
        "#test verilenlerine esasen texminler edir\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "# Parametr grid\n",
        "param_grid = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'max_depth': [None, 5, 10],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4]\n",
        "}\n",
        "\n",
        "# GridSearchCV\n",
        "grid_search = GridSearchCV(\n",
        "    estimator=RandomForestClassifier(random_state=42),\n",
        "    param_grid=param_grid,\n",
        "    cv=5, # 5-fold cross-validation\n",
        "    scoring='f1_macro', # Çox sinif olduğuna görə macro her sinife eyni cekini verir\n",
        "    n_jobs=-1 #butun cpu nuvelerini istifade etsin tez netice versin\n",
        ")\n",
        "#param_griddeki butun melumatari yoxlayir\n",
        "#cv-5 dataseti 5 yere bolur her defe biri test biri train olur\n",
        "\n",
        "#scoring-her sinif ucun ayrica f1 macro hesabblanir\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "print(\"Ən yaxşı parametrlər:\", grid_search.best_params_)\n",
        "print(\"Ən yaxşı skor:\", grid_search.best_score_)\n",
        "# Ən yaxşı parametrlərlə final model\n",
        "best_rf = grid_search.best_estimator_\n",
        "y_pred_best = best_rf.predict(X_test)\n",
        "\n",
        "print(\"Final Model Performance:\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_best))\n",
        "print(\"Precision:\", precision_score(y_test, y_pred_best, average='macro'))\n",
        "print(\"Recall:\", recall_score(y_test, y_pred_best, average='macro'))\n",
        "print(\"F1 Score:\", f1_score(y_test, y_pred_best, average='macro'))\n",
        "from scipy.stats import randint\n",
        "\n",
        "param_dist = {\n",
        "    'n_estimators': randint(50, 300),\n",
        "    'max_depth': [None, 5, 10, 20],\n",
        "    'min_samples_split': randint(2, 20),\n",
        "    'min_samples_leaf': randint(1, 10)\n",
        "}\n",
        "\n",
        "random_search = RandomizedSearchCV(\n",
        "    RandomForestClassifier(random_state=42),\n",
        "    param_distributions=param_dist,\n",
        "    n_iter=20,\n",
        "    cv=5,\n",
        "    scoring='f1_macro',\n",
        "    random_state=42,\n",
        "    n_jobs=-1\n",
        ")\n",
        "\n",
        "random_search.fit(X_train, y_train)\n",
        "\n",
        "print(\"Ən yaxşı parametrlər (Random Search):\", random_search.best_params_)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install optuna\n",
        "\n",
        "import optuna\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Objective function - burda Optuna parametrləri seçəcək\n",
        "def objective(trial):\n",
        "    # Parametr axtarışı sahələri\n",
        "    n_estimators = trial.suggest_int('n_estimators', 50, 300)\n",
        "    max_depth = trial.suggest_int('max_depth', 2, 20)\n",
        "    min_samples_split = trial.suggest_int('min_samples_split', 2, 20)\n",
        "    min_samples_leaf = trial.suggest_int('min_samples_leaf', 1, 10)\n",
        "\n",
        "    # Model\n",
        "    clf = RandomForestClassifier(\n",
        "        n_estimators=n_estimators,\n",
        "        max_depth=max_depth,\n",
        "        min_samples_split=min_samples_split,\n",
        "        min_samples_leaf=min_samples_leaf,\n",
        "        random_state=42\n",
        "    )\n",
        "\n",
        "    # Cross-validation (5-fold)\n",
        "    score = cross_val_score(clf, X_train, y_train, cv=5, scoring='f1_macro').mean()\n",
        "    return score\n",
        "\n",
        "# Optimizasiya\n",
        "study = optuna.create_study(direction='maximize')\n",
        "study.optimize(objective, n_trials=30)  # neçə dəfə sınayacaq\n",
        "\n",
        "print(\"Ən yaxşı parametrlər:\", study.best_params)\n",
        "print(\"Ən yaxşı F1 score:\", study.best_value)\n",
        "# Final model ən yaxşı parametrlərlə\n",
        "best_params = study.best_params\n",
        "best_rf_optuna = RandomForestClassifier(**best_params, random_state=42)\n",
        "best_rf_optuna.fit(X_train, y_train)\n",
        "\n",
        "# Test dəqiqliyi\n",
        "y_pred_optuna = best_rf_optuna.predict(X_test)\n",
        "\n",
        "print(\"Optuna Final Model Performance:\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_optuna))\n",
        "print(\"Precision:\", precision_score(y_test, y_pred_optuna, average='macro'))\n",
        "print(\"Recall:\", recall_score(y_test, y_pred_optuna, average='macro'))\n",
        "print(\"F1 Score:\", f1_score(y_test, y_pred_optuna, average='macro'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IxprhSVAIebQ",
        "outputId": "2c8d9ce2-d1d5-4998-9e9d-07e371c06eb1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting optuna\n",
            "  Downloading optuna-4.5.0-py3-none-any.whl.metadata (17 kB)\n",
            "Collecting alembic>=1.5.0 (from optuna)\n",
            "  Downloading alembic-1.16.4-py3-none-any.whl.metadata (7.3 kB)\n",
            "Collecting colorlog (from optuna)\n",
            "  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from optuna) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from optuna) (25.0)\n",
            "Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.12/dist-packages (from optuna) (2.0.43)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.12/dist-packages (from optuna) (4.67.1)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.12/dist-packages (from optuna) (6.0.2)\n",
            "Requirement already satisfied: Mako in /usr/lib/python3/dist-packages (from alembic>=1.5.0->optuna) (1.1.3)\n",
            "Requirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.12/dist-packages (from alembic>=1.5.0->optuna) (4.14.1)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.12/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.2.4)\n",
            "Downloading optuna-4.5.0-py3-none-any.whl (400 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m400.9/400.9 kB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading alembic-1.16.4-py3-none-any.whl (247 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m247.0/247.0 kB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\n",
            "Installing collected packages: colorlog, alembic, optuna\n",
            "Successfully installed alembic-1.16.4 colorlog-6.9.0 optuna-4.5.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-08-22 09:37:40,883] A new study created in memory with name: no-name-2728b07b-730c-435e-99fa-8521842adf0a\n",
            "[I 2025-08-22 09:37:43,141] Trial 0 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 280, 'max_depth': 6, 'min_samples_split': 20, 'min_samples_leaf': 4}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:46,276] Trial 1 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 248, 'max_depth': 3, 'min_samples_split': 17, 'min_samples_leaf': 5}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:48,498] Trial 2 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 271, 'max_depth': 5, 'min_samples_split': 7, 'min_samples_leaf': 5}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:49,089] Trial 3 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 72, 'max_depth': 2, 'min_samples_split': 7, 'min_samples_leaf': 1}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:51,391] Trial 4 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 283, 'max_depth': 8, 'min_samples_split': 15, 'min_samples_leaf': 6}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:53,500] Trial 5 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 261, 'max_depth': 20, 'min_samples_split': 16, 'min_samples_leaf': 2}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:54,759] Trial 6 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 155, 'max_depth': 13, 'min_samples_split': 12, 'min_samples_leaf': 6}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:55,256] Trial 7 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 59, 'max_depth': 18, 'min_samples_split': 6, 'min_samples_leaf': 4}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:58,165] Trial 8 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 281, 'max_depth': 6, 'min_samples_split': 12, 'min_samples_leaf': 2}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:37:59,739] Trial 9 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 139, 'max_depth': 12, 'min_samples_split': 3, 'min_samples_leaf': 10}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:38:01,363] Trial 10 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 197, 'max_depth': 9, 'min_samples_split': 19, 'min_samples_leaf': 9}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:38:03,164] Trial 11 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 218, 'max_depth': 2, 'min_samples_split': 20, 'min_samples_leaf': 4}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:38:05,108] Trial 12 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 234, 'max_depth': 5, 'min_samples_split': 16, 'min_samples_leaf': 8}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:38:07,158] Trial 13 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 231, 'max_depth': 2, 'min_samples_split': 20, 'min_samples_leaf': 7}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:38:09,752] Trial 14 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 300, 'max_depth': 8, 'min_samples_split': 17, 'min_samples_leaf': 4}. Best is trial 0 with value: 0.9411669445105977.\n",
            "[I 2025-08-22 09:38:12,109] Trial 15 finished with value: 0.9570860786959858 and parameters: {'n_estimators': 174, 'max_depth': 15, 'min_samples_split': 14, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:13,163] Trial 16 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 118, 'max_depth': 15, 'min_samples_split': 10, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:14,709] Trial 17 finished with value: 0.949134576007641 and parameters: {'n_estimators': 185, 'max_depth': 15, 'min_samples_split': 14, 'min_samples_leaf': 1}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:16,221] Trial 18 finished with value: 0.949134576007641 and parameters: {'n_estimators': 184, 'max_depth': 16, 'min_samples_split': 14, 'min_samples_leaf': 1}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:17,060] Trial 19 finished with value: 0.949134576007641 and parameters: {'n_estimators': 100, 'max_depth': 14, 'min_samples_split': 10, 'min_samples_leaf': 2}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:18,317] Trial 20 finished with value: 0.9570860786959858 and parameters: {'n_estimators': 151, 'max_depth': 18, 'min_samples_split': 13, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:19,566] Trial 21 finished with value: 0.9570860786959858 and parameters: {'n_estimators': 152, 'max_depth': 17, 'min_samples_split': 13, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:20,936] Trial 22 finished with value: 0.9570860786959858 and parameters: {'n_estimators': 164, 'max_depth': 17, 'min_samples_split': 12, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:22,079] Trial 23 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 137, 'max_depth': 20, 'min_samples_split': 9, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:23,411] Trial 24 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 108, 'max_depth': 18, 'min_samples_split': 13, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:25,391] Trial 25 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 147, 'max_depth': 18, 'min_samples_split': 14, 'min_samples_leaf': 2}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:27,122] Trial 26 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 208, 'max_depth': 11, 'min_samples_split': 9, 'min_samples_leaf': 5}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:28,491] Trial 27 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 168, 'max_depth': 16, 'min_samples_split': 18, 'min_samples_leaf': 3}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:29,498] Trial 28 finished with value: 0.9411669445105977 and parameters: {'n_estimators': 121, 'max_depth': 19, 'min_samples_split': 11, 'min_samples_leaf': 7}. Best is trial 15 with value: 0.9570860786959858.\n",
            "[I 2025-08-22 09:38:30,287] Trial 29 finished with value: 0.949134576007641 and parameters: {'n_estimators': 94, 'max_depth': 11, 'min_samples_split': 15, 'min_samples_leaf': 4}. Best is trial 15 with value: 0.9570860786959858.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ən yaxşı parametrlər: {'n_estimators': 174, 'max_depth': 15, 'min_samples_split': 14, 'min_samples_leaf': 3}\n",
            "Ən yaxşı F1 score: 0.9570860786959858\n",
            "Optuna Final Model Performance:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1 Score: 1.0\n"
          ]
        }
      ]
    }
  ]
}